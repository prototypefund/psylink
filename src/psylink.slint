import {
    Button,
    CheckBox,
    ComboBox,
    HorizontalBox,
    LineEdit,
    StandardListView,
    Switch,
    TabWidget,
    TextEdit,
    VerticalBox
} from "std-widgets.slint";

import "data/Signika-VariableFont.ttf";

export global Logic {
    // Parameters for key-handler:
    // 1. string: which key was pressed/released?
    // 2. bool: was it a key press? (as opposed to a key release)
    pure callback key-handler(string, bool);

    pure callback start-calibration-handler();
    pure callback stop-calibration-handler();
    pure callback train-handler();
    pure callback load-dataset-handler();
    pure callback save-dataset-handler();
    pure callback save-log-handler();
    pure callback load-model-handler();
    pure callback infer-start-handler();
    pure callback infer-stop-handler();
    pure callback set-option-accelerometer(bool);
    pure callback set-option-gyroscope(bool);
    pure callback set-option-action-count(string);
    pure callback set-option-keypress-value(int, string);
    pure callback set-option-epochs(string);
    pure callback set-option-max-datapoints(string);
    pure callback set-option-repetitions(string);
    pure callback set-option-action-time(string);
    pure callback set-option-tap(int, bool);
}

component LoadingPage {
    in property <string> statustext;
    in property <bool> connected;
    in property <int> animation-tick;

    HorizontalBox {
        alignment: center;
        VerticalBox {
            alignment: center;
            Text {
                text: "Put the PsyLink onto your left arm like on the photograph.\n1. Not too tight: It should feel comfortable.\n2. Not too loose: The electrodes should be firmly on the skin and not wiggle around.";
                font-size: 12pt;
            }
            Image {
                width: 400pt;
                height: 227pt;
                source: @image-url("data/photo.jpg");
            }
            Text {
                // Just for padding
                text: "";
            }
            if !connected: HorizontalBox {
                alignment: center;
                ta := TouchArea {
                    Image {
                        height: 32pt;
                        width: 32pt;
                        states [
                            // We could have used the slint builtin "animation-tick()"
                            // but that introduced animation delays when the mouse
                            // was being moved around. This may be fixed in the future,
                            // so maybe re-evaluate the use of "animation-tick()" later.
                            step3 when mod(animation-tick, 5) == 1: {
                                // only outer tick visible
                                source: @image-url("data/spinner-step3.png");
                            }
                            step1 when mod(animation-tick, 5) == 2: {
                                // no ticks visible
                                source: @image-url("data/spinner-step1.png");
                            }
                            step2 when mod(animation-tick, 5) == 3: {
                                // only inner tick visible
                                source: @image-url("data/spinner-step2.png");
                            }
                            step0 when true: {
                                // all ticks visible
                                source: @image-url("data/spinner-step0.png");
                            }
                        ]
                    }
                }
            }
            Text {
                horizontal-alignment: center;
                text: statustext;
            }
        }
    }
}

component GraphPage {
    in property <string> statustext;
    in property <string> pressedkeys;
    in property <string> text-calibration-instruction;
    in property <string> text-calibration-timer;
    in property <string> text-predicted;
    in property <bool> connected;
    in property <bool> training;
    in property <bool> calibrating;
    in property <bool> sampled;
    in property <bool> inferring;
    in property <bool> model-trained;
    in property <int> action-count;
    in property <image> graph0;

    HorizontalBox {
        // just for centering
        alignment: center;

        VerticalLayout {
            // all the rows
            alignment: center;

            HorizontalLayout {
                // The top row
                alignment: start;

                VerticalLayout {
                    alignment: end;
                    HorizontalBox {
                        Button {
                            enabled: connected;
                            text: calibrating ? "Stop calibration" : "Start calibration";
                            clicked => {
                                if calibrating {
                                    Logic.stop-calibration-handler();
                                } else {
                                    Logic.start-calibration-handler();
                                }
                            }
                        }
                        Button {
                            text: training ? "Training..." : "Train AI";
                            enabled: sampled && !training;
                            clicked => {
                                Logic.train-handler();
                            }
                        }
                        Button {
                            text: inferring ? "Stop Predicting" : "Predict";
                            enabled: connected && model-trained;
                            clicked => {
                                if inferring {
                                    Logic.infer-stop-handler();
                                } else {
                                    Logic.infer-start-handler();
                                }
                            }
                        }
                    }
                }
                VerticalLayout {
                    alignment: center;
                    visible: inferring;
                    HorizontalBox {
                        Text {
                            horizontal-alignment: left;
                            text: "Predicted: ";
                        }
                    }
                }
                VerticalLayout {
                    alignment: center;
                    visible: inferring;
                    HorizontalBox {
                        Text {
                            horizontal-alignment: left;
                            text: text-predicted;
                            font-size: 18pt;
                        }
                    }
                }
            }
            HorizontalLayout {
                alignment: start;
                VerticalBox {
                    alignment: start;
                    Text {
                        // Just for proper alignment
                        text: "";
                    }
                    ComboBox {
                        width: 64pt;
                        enabled: !calibrating;
                        model: ["1 action", "2 actions", "3 actions", "4 actions"];
                        current-value: "1 action";
                        selected(value) => {
                            Logic.set-option-action-count(value);
                        }
                    }
                }
                VerticalBox {
                    Text {
                        text: "Action 1";
                    }
                    ComboBox {
                        width: 72pt;
                        model: ["Nothing", "Sound", "Space", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
                        current-value: "w";
                        selected(value) => {
                            Logic.set-option-keypress-value(1, value);
                        }
                    }
                    CheckBox {
                        checked: false;
                        text: "Quick tap";
                        toggled() => {
                            Logic.set-option-tap(1, self.checked);
                        }
                    }
                }
                VerticalBox {
                    visible: action-count >= 2;
                    Text {
                        text: "Action 2";
                    }
                    ComboBox {
                        width: 72pt;
                        model: ["Nothing", "Sound", "Space", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
                        current-value: "a";
                        selected(value) => {
                            Logic.set-option-keypress-value(2, value);
                        }
                    }
                    CheckBox {
                        checked: false;
                        text: "Quick tap";
                        toggled => {
                            Logic.set-option-tap(2, self.checked);
                        }
                    }
                }
                VerticalBox {
                    visible: action-count >= 3;
                    Text {
                        text: "Action 3";
                    }
                    ComboBox {
                        width: 72pt;
                        model: ["Nothing", "Sound", "Space", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
                        current-value: "d";
                        selected(value) => {
                            Logic.set-option-keypress-value(3, value);
                        }
                    }
                    CheckBox {
                        checked: false;
                        text: "Quick tap";
                        toggled => {
                            Logic.set-option-tap(3, self.checked);
                        }
                    }
                }
                VerticalBox {
                    visible: action-count >= 4;
                    Text {
                        text: "Action 4";
                    }
                    ComboBox {
                        width: 72pt;
                        model: ["Nothing", "Sound", "Space", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
                        current-value: "s";
                        selected(value) => {
                            Logic.set-option-keypress-value(4, value);
                        }
                    }
                    CheckBox {
                        checked: false;
                        text: "Quick tap";
                        toggled => {
                            Logic.set-option-tap(4, self.checked);
                        }
                    }
                }
            }
            HorizontalBox {
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-instruction;
                    font-size: 24pt;
                }
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-timer;
                }
            }
            HorizontalBox {
                Image {
                    source: graph0;
                }
                VerticalBox {
                    alignment: center;
                    visible: connected;
                    Text { text: "EMG1"; }
                    Text { text: "EMG2"; }
                    Text { text: "EMG3"; }
                    Text { text: "EMG4"; }
                    Text { text: "EMG5"; }
                    Text { text: "EMG6"; }
                    Text { text: "EMG7"; }
                    Text { text: "EMG8"; }
                    Text { text: "Gyro1"; }
                    Text { text: "Gyro2"; }
                    Text { text: "Gyro3"; }
                    Text { text: "Accel1"; }
                    Text { text: "Accel2"; }
                    Text { text: "Accel3"; }
                }
            }
            Text {
                horizontal-alignment: center;
                visible: !connected;
                text: statustext;
            }
        }
    }
}

export component MainWindow inherits Window {
    title: "PsyLink";
    icon: @image-url("data/psylink.png");
    preferred-width: 500pt;
    preferred-height: 600pt;
    default-font-family: "Signika";
    in property <string> text-connection-title: "Scanning for nearby PsyLink devices...\n\nIs the PsyLink turned on?\nIs the battery charged?\nIs your Bluetooth active?\n(try turning it off and on, if necessary)";
    in property <string> text-graph-title: "Not connected";
    in property <string> text-calibration-instruction: "";
    in property <string> text-calibration-timer: "";
    in property <string> text-predicted: "n/a";
    in property <string> text-statusbar: "";
    in property <string> log: "";
    in property <string> train-max-datapoints: "";
    in property <string> train-epochs: "";
    in property <string> calib-repetitions: "";
    in property <string> calib-action-time: "";
    in property <bool> calibrating: false;
    in property <bool> inferring: false;
    in property <bool> connected: false;
    in property <bool> sampled: false;
    in property <bool> training: false;
    in property <bool> model-trained: false;
    in property <int> action-count: 1;
    in property <string> pressedkeys: "";
    in property <int> page: 0;
    in property <image> graph0;
    in property <int> animation-tick: 0;

    init => {
        focusscope.focus();
    }

    focusscope := FocusScope {
        VerticalBox {
            TabWidget {
                current-index: page;
                Tab {
                    title: "Connection";
                    LoadingPage {
                        statustext: text-connection-title;
                        connected: connected;
                        animation-tick: animation-tick;
                    }
                }
                Tab {
                    title: "Signals";
                    GraphPage {
                        calibrating: calibrating;
                        training: training;
                        connected: connected;
                        sampled: sampled;
                        statustext: text-graph-title;
                        text-calibration-instruction: text-calibration-instruction;
                        text-calibration-timer: text-calibration-timer;
                        text-predicted: text-predicted;
                        pressedkeys: pressedkeys;
                        inferring: inferring;
                        model-trained: model-trained;
                        action-count: action-count;
                        graph0: graph0;
                    }
                }
                Tab {
                    title: "Dev Tools";
                    VerticalBox {
                        alignment: start;
                        HorizontalBox {
                            alignment: start;
                            Button {
                                text: "Load test dataset";
                                clicked => {
                                    Logic.load-dataset-handler();
                                }
                            }
                            Button {
                                text: "Save dataset";
                                clicked => {
                                    Logic.save-dataset-handler();
                                }
                            }
                            Button {
                                text: "Load test AI calibration model";
                                clicked => {
                                    Logic.load-model-handler();
                                }
                            }
                            Button {
                                text: "Save activity log";
                                clicked => {
                                    Logic.save-log-handler();
                                }
                            }
                        }
                        HorizontalBox {
                            alignment: start;
                            Text {
                                text: "Training Datapoint Limit:";
                            }
                            LineEdit {
                                text: train-max-datapoints;
                                edited(value) => {
                                    Logic.set-option-max-datapoints(value);
                                }
                            }
                            Text {
                                text: "Training Epochs:";
                            }
                            LineEdit {
                                text: train-epochs;
                                edited(value) => {
                                    Logic.set-option-epochs(value);
                                }
                            }
                        }
                        HorizontalBox {
                            Text {
                                text: "Calibration Repetitions:";
                            }
                            LineEdit {
                                text: calib-repetitions;
                                edited(value) => {
                                    Logic.set-option-repetitions(value);
                                }
                            }
                            Text {
                                text: "Calibration Action Time (sec):";
                            }
                            LineEdit {
                                text: calib-action-time;
                                edited(value) => {
                                    Logic.set-option-action-time(value);
                                }
                            }
                        }
                        HorizontalBox {
                            alignment: start;
                            Switch {
                                checked: true;
                                text: "Activate Gyroscope";
                                toggled => {
                                    Logic.set-option-gyroscope(self.checked);
                                }
                            }
                            Switch {
                                checked: true;
                                text: "Activate Accelerometer";
                                toggled => {
                                    Logic.set-option-accelerometer(self.checked);
                                }
                            }
                        }
                        Text {
                            text: "Activity Log:";
                        }
                        TextEdit {
                            width: parent.width * 0.9;
                            height: 200pt;
                            text: log;
                            read-only: true;
                        }
                    }
                }
            }
            Text {
                text: text-statusbar;
            }
        }
        key-pressed(event) => {
            Logic.key-handler(event.text, true);
            accept
        }
        key-released(event) => {
            Logic.key-handler(event.text, false);
            accept
        }
    }
}
