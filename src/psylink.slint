import {
    Button,
    ComboBox,
    HorizontalBox,
    StandardListView,
    Switch,
    TabWidget,
    VerticalBox
} from "std-widgets.slint";

import "data/Signika-VariableFont.ttf";

export global Logic {
    // Parameters for key-handler:
    // 1. string: which key was pressed/released?
    // 2. bool: was it a key press? (as opposed to a key release)
    pure callback key-handler(string, bool);

    // Parameters for start-calibration:
    // 1. int: how many actions to calibrate for?
    pure callback start-calibration-handler(int);

    pure callback stop-calibration-handler();
    pure callback train-handler();
    pure callback load-handler();
    pure callback save-handler();
    pure callback load-model-handler();
    pure callback infer-start-handler();
    pure callback infer-stop-handler();
    pure callback set-option-accelerometer(bool);
    pure callback set-option-gyroscope(bool);
    pure callback set-option-keypress-value(string);
}

component LoadingPage {
    in property <string> statustext;
    in property <bool> connected;
    in property <int> animation-tick;

    HorizontalBox {
        alignment: center;
        VerticalBox {
            alignment: center;
            if !connected: HorizontalBox {
                alignment: center;
                ta := TouchArea {
                    Image {
                        height: 32pt;
                        width: 32pt;
                        states [
                            // We could have used the slint builtin "animation-tick()"
                            // but that introduced animation delays when the mouse
                            // was being moved around. This may be fixed in the future,
                            // so maybe re-evaluate the use of "animation-tick()" later.
                            step3 when mod(animation-tick, 5) == 1: {
                                // only outer tick visible
                                source: @image-url("data/spinner-step3.png");
                            }
                            step1 when mod(animation-tick, 5) == 2: {
                                // no ticks visible
                                source: @image-url("data/spinner-step1.png");
                            }
                            step2 when mod(animation-tick, 5) == 3: {
                                // only inner tick visible
                                source: @image-url("data/spinner-step2.png");
                            }
                            step0 when true: {
                                // all ticks visible
                                source: @image-url("data/spinner-step0.png");
                            }
                        ]
                    }
                }
            }
            Text {
                horizontal-alignment: center;
                text: statustext;
            }
        }
    }
}

component GraphPage {
    in property <string> statustext;
    in property <string> pressedkeys;
    in property <string> text-calibration-instruction;
    in property <string> text-calibration-timer;
    in property <string> text-predicted;
    in property <bool> connected;
    in property <bool> calibrating;
    in property <bool> inferring;
    in property <bool> model-trained;
    in property <image> graph0;

    HorizontalBox {
        alignment: center;
        VerticalBox {
            alignment: center;
            HorizontalBox {
                alignment: start;
                Button {
                    enabled: !calibrating && connected;
                    text: "Start calibration";
                    clicked => {
                        Logic.start-calibration-handler(1);
                    }
                }
                Button {
                    enabled: calibrating;
                    text: "Stop calibration";
                    clicked => {
                        Logic.stop-calibration-handler();
                    }
                }
                Button {
                    text: "Train";
                    clicked => {
                        Logic.train-handler();
                    }
                }
                Text {
                    horizontal-alignment: left;
                    text: "Predicted key: ";
                }
                Text {
                    horizontal-alignment: left;
                    text: text-predicted;
                    font-size: 32pt;
                }
            }
            HorizontalBox {
                alignment: start;
                Button {
                    text: "Save calibration data";
                    clicked => {
                        Logic.save-handler();
                    }
                }
                Button {
                    text: "Load test dataset";
                    clicked => {
                        Logic.load-handler();
                    }
                }
            }
            HorizontalBox {
                alignment: start;
                Button {
                    text: "Load test model";
                    clicked => {
                        Logic.load-model-handler();
                    }
                }
                Button {
                    text: "Predict";
                    enabled: !inferring && model-trained;
                    clicked => {
                        Logic.infer-start-handler();
                    }
                }
                Button {
                    text: "Stop predicting";
                    enabled: inferring;
                    clicked => {
                        Logic.infer-stop-handler();
                    }
                }
                ComboBox {
                    model: ["Nothing", "Space", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
                    current-value: "a";
                    selected(value) => {
                        Logic.set-option-keypress-value(value);
                    }
                }
            }
            HorizontalBox {
                Switch {
                    checked: true;
                    text: "Activate Gyroscope";
                    toggled => {
                        Logic.set-option-gyroscope(self.checked);
                    }
                }
                Switch {
                    checked: true;
                    text: "Activate Accelerometer";
                    toggled => {
                        Logic.set-option-accelerometer(self.checked);
                    }
                }
            }
            HorizontalBox {
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-instruction;
                }
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-timer;
                }
            }
            HorizontalBox {
                Image {
                    source: graph0;
                }
                VerticalBox {
                    alignment: center;
                    visible: connected;
                    Text { text: "EMG1"; }
                    Text { text: "EMG2"; }
                    Text { text: "EMG3"; }
                    Text { text: "EMG4"; }
                    Text { text: "EMG5"; }
                    Text { text: "EMG6"; }
                    Text { text: "EMG7"; }
                    Text { text: "EMG8"; }
                    Text { text: "Gyro1"; }
                    Text { text: "Gyro2"; }
                    Text { text: "Gyro3"; }
                    Text { text: "Accel1"; }
                    Text { text: "Accel2"; }
                    Text { text: "Accel3"; }
                }
            }
            Text {
                horizontal-alignment: center;
                visible: !connected;
                text: statustext;
            }
        }
    }
}

export component MainWindow inherits Window {
    title: "PsyLink";
    icon: @image-url("data/icon.svg");
    preferred-width: 500pt;
    preferred-height: 600pt;
    default-font-family: "Signika";
    in property <string> text-connection-title: "Scanning for nearby PsyLink devices...\n\nIs the PsyLink turned on?\nIs the battery charged?\nIs your bluetooth active?\n(try turning it off and on, if necessary)";
    in property <string> text-graph-title: "Not connected";
    in property <string> text-calibration-instruction: "";
    in property <string> text-calibration-timer: "";
    in property <string> text-predicted: "n/a";
    in property <bool> calibrating: false;
    in property <bool> inferring: false;
    in property <bool> connected: false;
    in property <bool> model-trained: false;
    in property <string> pressedkeys: "";
    in property <int> page: 0;
    in property <image> graph0;
    in property <int> animation-tick: 0;

    init => {
        focusscope.focus();
    }

    focusscope := FocusScope {
        TabWidget {
            current-index: page;
            Tab {
                title: "Connection";
                LoadingPage {
                    statustext: text-connection-title;
                    connected: connected;
                    animation-tick: animation-tick;
                }
            }
            Tab {
                title: "Signals";
                GraphPage {
                    calibrating: calibrating;
                    connected: connected;
                    statustext: text-graph-title;
                    text-calibration-instruction: text-calibration-instruction;
                    text-calibration-timer: text-calibration-timer;
                    text-predicted: text-predicted;
                    pressedkeys: pressedkeys;
                    inferring: inferring;
                    model-trained: model-trained;
                    graph0: graph0;
                }
            }
        }
        key-pressed(event) => {
            Logic.key-handler(event.text, true);
            accept
        }
        key-released(event) => {
            Logic.key-handler(event.text, false);
            accept
        }
    }
}
