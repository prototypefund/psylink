import {
    Button,
    HorizontalBox,
    Spinner,
    StandardListView,
    TabWidget,
    VerticalBox
} from "std-widgets.slint";

import "data/Signika-VariableFont.ttf";

export global Logic {
    // Parameters for key-handler:
    // 1. string: which key was pressed/released?
    // 2. bool: was it a key press? (as opposed to a key release)
    pure callback key-handler(string, bool);

    // Parameters for start-calibration:
    // 1. int: how many actions to calibrate for?
    pure callback start-calibration-handler(int);

    pure callback stop-calibration-handler();
    pure callback train-handler();
    pure callback load-handler();
    pure callback save-handler();
    pure callback load-model-handler();
    pure callback infer-start-handler();
    pure callback infer-stop-handler();
}

export component LoadingPage {
    in property <string> statustext;
    in property <bool> connected;
    HorizontalBox {
        alignment: center;
        VerticalBox {
            alignment: center;
            spacing: 20pt;
            Spinner {
                indeterminate: true;
                visible: !connected;
            }
            Text {
                horizontal-alignment: center;
                text: statustext;
            }
        }
    }
}

export component GraphPage {
    in property <string> statustext;
    in property <string> pressedkeys;
    in property <string> text-calibration-instruction;
    in property <string> text-calibration-timer;
    in property <bool> connected;
    in property <bool> calibrating;
    in property <image> graph0;

    HorizontalBox {
        alignment: center;
        VerticalBox {
            alignment: center;
            spacing: 20pt;
            HorizontalBox {
                alignment: start;
                Button {
                    enabled: !calibrating && connected;
                    text: "Start calibration";
                    clicked => {
                        Logic.start-calibration-handler(1);
                    }
                }
                Button {
                    enabled: calibrating;
                    text: "Stop calibration";
                    clicked => {
                        Logic.stop-calibration-handler();
                    }
                }
                Button {
                    text: "Train";
                    clicked => {
                        Logic.train-handler();
                    }
                }
            }
            HorizontalBox {
                Button {
                    text: "Save calibration data";
                    clicked => {
                        Logic.save-handler();
                    }
                }
                Button {
                    text: "Load test dataset";
                    clicked => {
                        Logic.load-handler();
                    }
                }
            }
            HorizontalBox {
                Button {
                    text: "Load test model";
                    clicked => {
                        Logic.load-model-handler();
                    }
                }
                Button {
                    text: "Infer";
                    clicked => {
                        Logic.infer-start-handler();
                    }
                }
                Button {
                    text: "Stop Inference";
                    clicked => {
                        Logic.infer-stop-handler();
                    }
                }
            }
            HorizontalBox {
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-instruction;
                }
                Text {
                    horizontal-alignment: center;
                    text: text-calibration-timer;
                }
            }
            HorizontalBox {
                Image {
                    source: graph0;
                }
                VerticalBox {
                    alignment: center;
                    visible: connected;
                    Text { text: "EMG1"; }
                    Text { text: "EMG2"; }
                    Text { text: "EMG3"; }
                    Text { text: "EMG4"; }
                    Text { text: "EMG5"; }
                    Text { text: "EMG6"; }
                    Text { text: "EMG7"; }
                    Text { text: "EMG8"; }
                    Text { text: "Gyro1"; }
                    Text { text: "Gyro2"; }
                    Text { text: "Gyro3"; }
                    Text { text: "Accel1"; }
                    Text { text: "Accel2"; }
                    Text { text: "Accel3"; }
                }
            }
            Text {
                horizontal-alignment: center;
                visible: !connected;
                text: statustext;
            }
        }
    }
}

export component MainWindow inherits Window {
    title: "PsyLink";
    icon: @image-url("data/icon.svg");
    preferred-width: 400pt;
    preferred-height: 500pt;
    default-font-family: "Signika";
    in property <string> text-connection-title: "Scanning for nearby PsyLink devices...\n\nIs the PsyLink turned on?\nIs the battery charged?\nIs your bluetooth active?\n(try turning it off and on, if necessary)";
    in property <string> text-graph-title: "Not connected";
    in property <string> text-calibration-instruction: "";
    in property <string> text-calibration-timer: "";
    in property <bool> calibrating: false;
    in property <bool> connected: false;
    in property <string> pressedkeys: "";
    in property <int> page: 0;
    in property <image> graph0;

    init => {
        focusscope.focus();
    }

    focusscope := FocusScope {
        TabWidget {
            current-index: page;
            Tab {
                title: "Connection";
                LoadingPage {
                    statustext: text-connection-title;
                    connected: connected;
                }
            }
            Tab {
                title: "Signals";
                GraphPage {
                    calibrating: calibrating;
                    connected: connected;
                    statustext: text-graph-title;
                    text-calibration-instruction: text-calibration-instruction;
                    text-calibration-timer: text-calibration-timer;
                    pressedkeys: pressedkeys;
                    graph0: graph0;
                }
            }
        }
        key-pressed(event) => {
            Logic.key-handler(event.text, true);
            accept
        }
        key-released(event) => {
            Logic.key-handler(event.text, false);
            accept
        }
    }
}
